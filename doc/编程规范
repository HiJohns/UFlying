一些基本约定

1、子系统
    系统分为若干子系统（首页、会员、任务、保险、管理以及公共子系统）。
    视觉上，除公共子系统外，每个子系统对应于一个页面，形成一个单页面程序，而公共子系统处理公共逻辑和样式，保证全局一致性。
    逻辑上，每个页面子系统都由以下部分构成：
        - 一个jsp文件
        - 一个顶层controller（JavaScript）
        - 一个css文件
        - 适用于本子系统的组件，组件由一个或若干个html/css/js文件构成
    公共子系统由以下部分构成：
        - uf.css（公用样式）
        - 公共组件
        - 数据模型
        - 公共服务
    当切换进一个页面的时候，总会首先载入公共子系统，再载入对应的页面子系统。
2、一些设计原则
    - 考虑到自适应界面的要求，子系统内的视图切换不再使用弹出式对话框，而采用Angular路由控制下的视图切换
    - 数据模型不操纵界面，采用Singleton架构，主要负责处理与服务器端通讯及缓存（如城市信息）。
    - 避免针对单一目标设定样式，而应识别通用的样式适用规则，尽快制订适应全局的配色方案和样式规范
3、命名原则
    - 目录名适用小camel规则，文件名适用大camel规则
9、逻辑组织为，每个子系统
定义的对象命名规则为：
- 所有对象都有Uf前缀
节与节之间不设分节符，每一节都适用大camel规则
第二节为以下缩写

    Cmp: Components
    Misc: Misc
    Mdl: Models
    Ctrl: Controllers

        以下各节应与文件路径对应，如components/common/Footer.js中定义的对象命名为UfCmpCommonFooter。

2、新目录结构如下：

    WEB_INF    存放各子系统的页面定义文件
    common: module名UfCommon
        Uf.css
        components
        models
        misc
    admin: module名UfAdmin
        Admin.js
        Admin.css
	views
        components
        models
        misc
    account: module名UfAccount
        Account.js
        Account.css
	views
        components
        models
        misc
    mission: module名UfMission
        Mission.js
        Mission.css
	views
        components
        models
        misc
    insurance: module名UfInsurance
        Insurance.js
        Insurance.css
	views
        components
        models
        misc
    视图与组件的区别在于：
	视图是子系统的顶层可视模块，有独立的URL（要求支持独立打开），容器仅限于ng-view标记，有独立的控制器。
	组件可以出现在系统的任何位置，无独立URL，有自己特有的标记，一般没有独立的控制器，但有连接函数。
    组件命名时以com开头，然后依次为目录名和文件名，目录名和文件名不管包含几个字母都只有首字母大写。数据模型命名以mod开头，其他以i开头。
    3rdParty 存放第三方插件
    原有的目录结构（js/css）暂时保留
    img目录用于保存图像
	    common 存放适用于所有子系统的图像
	    mission / insurance / admin / user存放各个子系统的图像
	doc文件用于存放包括本规范在内的文档（不对外发布）

3、服务器端配置应作相应修改
